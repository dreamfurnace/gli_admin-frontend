name: Deploy Admin Frontend to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  NODE_VERSION: '22'

jobs:
  deploy:
    name: Build and Deploy to S3 + CloudFront (Production)
    runs-on: ubuntu-latest

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 환경 변수 생성
      run: |
        export TZ='Asia/Seoul'
        BUILD_UID=$(date '+%m.%d-%H:%M:%S')
        echo "BUILD_UID=$BUILD_UID" >> $GITHUB_ENV
        echo "🎯 Generated BUILD_UID: $BUILD_UID (KST)"

        # .env.production.local 파일 생성 (빌드 시 사용)
        echo "VITE_APP_ENV=production" > .env.production.local
        echo "VITE_API_BASE_URL=https://api.glibiz.com" >> .env.production.local
        echo "VITE_BUILD_UID=$BUILD_UID" >> .env.production.local

        echo "📝 환경 변수 파일 생성 완료"

    - name: TypeScript 타입 체크
      run: npm run type-check

    - name: Lint 체크
      run: npm run lint

    - name: 프로덕션 빌드
      run: npm run build -- --mode production
      env:
        NODE_ENV: production

    - name: 빌드 결과 확인
      run: |
        echo "📦 빌드 결과 디렉토리 내용:"
        ls -lah dist/
        echo "📊 빌드 파일 크기:"
        du -sh dist/

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: S3 버킷 백업 (롤백용)
      run: |
        echo "💾 현재 배포된 파일 백업 중..."
        BACKUP_PATH="s3://${{ secrets.PROD_ADMIN_S3_BUCKET }}-backup/$(date +%Y%m%d-%H%M%S)"
        aws s3 sync s3://${{ secrets.PROD_ADMIN_S3_BUCKET }} $BACKUP_PATH --quiet || echo "백업 대상이 없습니다"
        echo "✅ 백업 완료: $BACKUP_PATH"

    - name: S3 버킷 동기화
      run: |
        echo "☁️  S3 버킷에 업로드 중..."
        aws s3 sync ./dist s3://${{ secrets.PROD_ADMIN_S3_BUCKET }} \
          --delete \
          --cache-control "public, max-age=31536000, immutable" \
          --exclude "index.html" \
          --exclude "*.map"

        # index.html은 캐시하지 않음
        aws s3 cp ./dist/index.html s3://${{ secrets.PROD_ADMIN_S3_BUCKET }}/index.html \
          --cache-control "public, max-age=0, must-revalidate" \
          --content-type "text/html"

        echo "✅ S3 업로드 완료"

    - name: CloudFront 캐시 무효화
      run: |
        echo "🔄 CloudFront 캐시 무효화 중..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.PROD_ADMIN_CF_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)

        echo "무효화 ID: $INVALIDATION_ID"

        # 무효화 완료 대기 (최대 5분)
        echo "⏳ CloudFront 무효화 완료 대기 중..."
        aws cloudfront wait invalidation-completed \
          --distribution-id ${{ secrets.PROD_ADMIN_CF_DISTRIBUTION_ID }} \
          --id $INVALIDATION_ID \
          || echo "⚠️  타임아웃 - 백그라운드에서 계속 진행됩니다"

        echo "✅ CloudFront 캐시 무효화 완료"

    - name: 배포 검증
      run: |
        echo "🏥 배포 검증 중..."

        # URL 헬스 체크
        for i in {1..10}; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://admin.glibiz.com || echo "000")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Admin 사이트 헬스체크 성공!"
            break
          elif [ $i -eq 10 ]; then
            echo "⚠️  헬스체크 실패 (HTTP $HTTP_STATUS)"
          fi

          sleep 5
        done

    - name: 배포 완료 알림
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 GLI Admin Frontend Production 배포 성공!"
          echo "🌐 URL: https://admin.glibiz.com"
          echo "🏷️  BUILD_UID: ${{ env.BUILD_UID }}"
          echo "📦 S3 Bucket: ${{ secrets.PROD_ADMIN_S3_BUCKET }}"
          echo "☁️  CloudFront: ${{ secrets.PROD_ADMIN_CF_DISTRIBUTION_ID }}"
          echo "📌 Git SHA: ${{ github.sha }}"
          echo ""
          echo "롤백이 필요한 경우:"
          echo "1. S3 백업에서 이전 버전 복원"
          echo "2. CloudFront 캐시 무효화"
        else
          echo "❌ GLI Admin Frontend Production 배포 실패!"
          echo "⚠️  롤백이 필요할 수 있습니다."
        fi
