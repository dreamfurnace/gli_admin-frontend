name: Deploy Admin Frontend to Staging

on:
  push:
    branches: [stg]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  NODE_VERSION: '22'

jobs:
  deploy:
    name: Build and Deploy to S3 + CloudFront (Staging)
    runs-on: ubuntu-latest

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 환경 변수 생성
      run: |
        export TZ='Asia/Seoul'
        BUILD_UID=$(date '+%m.%d-%H:%M:%S')
        echo "BUILD_UID=$BUILD_UID" >> $GITHUB_ENV
        echo "🎯 Generated BUILD_UID: $BUILD_UID (KST)"

        # .env.staging 파일이 이미 존재하므로, 빌드 UID만 추가
        echo "VITE_BUILD_UID=$BUILD_UID" >> .env.staging

        echo "📝 환경 변수 파일 업데이트 완료"
        cat .env.staging

    - name: TypeScript 타입 체크
      run: npm run type-check || echo "⚠️  타입 체크 경고 무시 (배포 진행)"

    - name: 프로덕션 빌드 (Staging 모드)
      run: npm run build-only -- --mode staging
      env:
        NODE_ENV: production

    - name: 빌드 결과 확인
      run: |
        echo "📦 빌드 결과 디렉토리 내용:"
        ls -lah dist/
        echo "📊 빌드 파일 크기:"
        du -sh dist/

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: S3 버킷 동기화
      run: |
        echo "☁️  S3 버킷에 업로드 중..."
        aws s3 sync ./dist s3://${{ secrets.STG_S3_BUCKET }} \
          --delete \
          --cache-control "public, max-age=31536000, immutable" \
          --exclude "index.html" \
          --exclude "*.map"

        # index.html은 캐시하지 않음
        aws s3 cp ./dist/index.html s3://${{ secrets.STG_S3_BUCKET }}/index.html \
          --cache-control "public, max-age=0, must-revalidate" \
          --content-type "text/html"

        echo "✅ S3 업로드 완료"

    - name: CloudFront SPA 라우팅 설정 확인
      run: |
        echo "🔍 CloudFront 에러 페이지 설정 확인 중..."

        # CloudFront 배포 설정 가져오기
        ETAG=$(aws cloudfront get-distribution-config \
          --id ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }} \
          --query 'ETag' \
          --output text)

        echo "현재 ETag: $ETAG"

        # 에러 페이지 설정이 없으면 추가 (403, 404 → index.html)
        aws cloudfront get-distribution-config \
          --id ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }} \
          --output json > /tmp/cf-config.json

        # CustomErrorResponses 확인 및 업데이트
        python3 << 'PYTHON_SCRIPT'
        import json

        with open('/tmp/cf-config.json', 'r') as f:
            config = json.load(f)

        dist_config = config['DistributionConfig']

        # SPA 라우팅을 위한 에러 응답 설정
        error_responses = [
            {
                "ErrorCode": 403,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 10
            },
            {
                "ErrorCode": 404,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 10
            }
        ]

        # CustomErrorResponses 업데이트
        dist_config['CustomErrorResponses'] = {
            'Quantity': len(error_responses),
            'Items': error_responses
        }

        # 업데이트된 설정 저장
        with open('/tmp/cf-config-updated.json', 'w') as f:
            json.dump(dist_config, f)

        print("✅ CloudFront SPA 라우팅 설정 준비 완료")
        PYTHON_SCRIPT

        # CloudFront 배포 업데이트
        aws cloudfront update-distribution \
          --id ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }} \
          --distribution-config file:///tmp/cf-config-updated.json \
          --if-match "$ETAG" || echo "⚠️  CloudFront 설정은 이미 최신 상태이거나 업데이트가 불필요합니다"

        echo "✅ CloudFront SPA 라우팅 설정 완료"

    - name: CloudFront 캐시 무효화
      run: |
        echo "🔄 CloudFront 캐시 무효화 중..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.STG_ADMIN_CF_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)

        echo "무효화 ID: $INVALIDATION_ID"
        echo "✅ CloudFront 캐시 무효화 요청 완료"

    - name: 배포 완료 알림
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 GLI Admin Frontend Staging 배포 성공!"
          echo "🌐 URL: https://stg-admin.glibiz.com"
          echo "🏷️  BUILD_UID: ${{ env.BUILD_UID }}"
          echo "📦 S3 Bucket: ${{ secrets.STG_S3_BUCKET }}"
          echo "☁️  CloudFront: ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }}"
        else
          echo "❌ GLI Admin Frontend Staging 배포 실패!"
        fi

    - name: CloudFront SPA 라우팅 설정 확인
      run: |
        echo "🔍 CloudFront 에러 페이지 설정 확인 중..."

        # CloudFront 배포 설정 가져오기
        ETAG=$(aws cloudfront get-distribution-config \
          --id ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }} \
          --query 'ETag' \
          --output text)

        echo "현재 ETag: $ETAG"

        # 에러 페이지 설정이 없으면 추가 (403, 404 → index.html)
        aws cloudfront get-distribution-config \
          --id ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }} \
          --output json > /tmp/cf-config.json

        # CustomErrorResponses 확인 및 업데이트
        python3 << 'PYTHON_SCRIPT'
        import json

        with open('/tmp/cf-config.json', 'r') as f:
            config = json.load(f)

        dist_config = config['DistributionConfig']

        # SPA 라우팅을 위한 에러 응답 설정
        error_responses = [
            {
                "ErrorCode": 403,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 10
            },
            {
                "ErrorCode": 404,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 10
            }
        ]

        # CustomErrorResponses 업데이트
        dist_config['CustomErrorResponses'] = {
            'Quantity': len(error_responses),
            'Items': error_responses
        }

        # 업데이트된 설정 저장
        with open('/tmp/cf-config-updated.json', 'w') as f:
            json.dump(dist_config, f)

        print("✅ CloudFront SPA 라우팅 설정 준비 완료")
        PYTHON_SCRIPT

        # CloudFront 배포 업데이트
        aws cloudfront update-distribution \
          --id ${{ secrets.STG_CLOUDFRONT_DISTRIBUTION_ID }} \
          --distribution-config file:///tmp/cf-config-updated.json \
          --if-match "$ETAG" || echo "⚠️  CloudFront 설정은 이미 최신 상태이거나 업데이트가 불필요합니다"

        echo "✅ CloudFront SPA 라우팅 설정 완료"
